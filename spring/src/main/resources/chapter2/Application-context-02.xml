<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="
	       http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		   http://www.springframework.org/schema/context
		   http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!--默认使用默认的构造方法进行初始化-->
    <bean id="helloApi2" class="com.javaconfig.spring.chapter2.HelloInEnglish" />

    <!--制定构造参数进行初始化-->
    <bean id = "helloApi3" class="com.javaconfig.spring.chapter2.HelloInEnglish" >
        <constructor-arg name="word" value="constructor-arg"></constructor-arg>
    </bean>


    <!--使用静态工厂方式实例化Bean，使用这种方式除了指定必须的class属性，
    还要指定factory-method属性来指定实例化Bean的方法，而且使用静态工厂方法也允许指定方法参数，
    spring IoC容器将调用此属性指定的方法来获取Bean，配置如下所示-->
    <bean id="bean_f_factory" class="com.javaconfig.spring.chapter2.HelloApiFactory" factory-method="getHelloApiInstance">
        <constructor-arg name="word" value="init-factory"></constructor-arg>
    </bean>

    <!--使用实例工厂方法实例化Bean，使用这种方式不能指定class属性，
    此时必须使用factory-bean属性来指定工厂Bean，factory-method属性指定实例化Bean的方法，
    而且使用实例工厂方法允许指定方法参数，方式和使用构造器方式一样，配置如下：-->
    <bean id="instanceFactory" class="com.javaconfig.spring.chapter2.HelloApiInstanceFactory"/>
    <bean id="bean_f_instanceFactory" factory-bean="instanceFactory" factory-method="newInstance">
        <constructor-arg name="word" value="init-instance-factory" />
    </bean>



 </beans>